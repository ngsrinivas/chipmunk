// Data type for holding result from both sketches
struct StateAndPacket {
  
    int pkt_0;
  
  
    int state_0;
  
}

include "before.sk";
include "after.sk";

harness void main(
  
    int sanp_pkt_0,
  
  
    int sanp_state_0,
  
  int stateful_operand_mux_0_0_ctrl,int output_mux_phv_0_0_ctrl,int output_mux_phv_0_1_ctrl,int stateless_alu_0_0_mux1_ctrl,int stateless_alu_0_0_mux2_ctrl,int stateless_alu_0_0_opcode,int stateless_alu_0_0_immediate,int stateless_alu_0_0_mode,int stateless_alu_0_1_mux1_ctrl,int stateless_alu_0_1_mux2_ctrl,int stateless_alu_0_1_opcode,int stateless_alu_0_1_immediate,int stateless_alu_0_1_mode,int stateful_alu_0_0_opcode,int stateful_alu_0_0_immediate,int stateful_alu_0_0_mode,int salu_config_0_0,
  int stateful_operand_mux_0_0_ctrl,int output_mux_phv_0_0_ctrl,int output_mux_phv_0_1_ctrl,int stateless_alu_0_0_mux1_ctrl,int stateless_alu_0_0_mux2_ctrl,int stateless_alu_0_0_opcode,int stateless_alu_0_0_immediate,int stateless_alu_0_0_mode,int stateless_alu_0_1_mux1_ctrl,int stateless_alu_0_1_mux2_ctrl,int stateless_alu_0_1_opcode,int stateless_alu_0_1_immediate,int stateless_alu_0_1_mode,int stateful_alu_0_0_opcode,int stateful_alu_0_0_immediate,int stateful_alu_0_0_mode,int salu_config_0_0) {

  // Preconditions:

  
  assume((stateful_operand_mux_0_0_ctrl >= 0) && (stateful_operand_mux_0_0_ctrl <= 2));
  
  assume((output_mux_phv_0_0_ctrl >= 0) && (output_mux_phv_0_0_ctrl <= 2));
  
  assume((output_mux_phv_0_1_ctrl >= 0) && (output_mux_phv_0_1_ctrl <= 2));
  
  assume((stateless_alu_0_0_mux1_ctrl >= 0) && (stateless_alu_0_0_mux1_ctrl <= 2));
  
  assume((stateless_alu_0_0_mux2_ctrl >= 0) && (stateless_alu_0_0_mux2_ctrl <= 2));
  
  assume((stateless_alu_0_0_opcode >= 0) && (stateless_alu_0_0_opcode <= 2));
  
  assume((stateless_alu_0_0_immediate >= 0) && (stateless_alu_0_0_immediate <= 4));
  
  assume((stateless_alu_0_0_mode >= 0) && (stateless_alu_0_0_mode <= 4));
  
  assume((stateless_alu_0_1_mux1_ctrl >= 0) && (stateless_alu_0_1_mux1_ctrl <= 2));
  
  assume((stateless_alu_0_1_mux2_ctrl >= 0) && (stateless_alu_0_1_mux2_ctrl <= 2));
  
  assume((stateless_alu_0_1_opcode >= 0) && (stateless_alu_0_1_opcode <= 2));
  
  assume((stateless_alu_0_1_immediate >= 0) && (stateless_alu_0_1_immediate <= 4));
  
  assume((stateless_alu_0_1_mode >= 0) && (stateless_alu_0_1_mode <= 4));
  
  assume((stateful_alu_0_0_opcode >= 0) && (stateful_alu_0_0_opcode <= 2));
  
  assume((stateful_alu_0_0_immediate >= 0) && (stateful_alu_0_0_immediate <= 4));
  
  assume((stateful_alu_0_0_mode >= 0) && (stateful_alu_0_0_mode <= 2));
  
  assume((salu_config_0_0 >= 0) && (salu_config_0_0 <= 2));
  

  
  assume(stateful_operand_mux_0_0_ctrl < 2);
  
  assume(output_mux_phv_0_0_ctrl < 2);
  
  assume(output_mux_phv_0_1_ctrl < 2);
  
  assume(stateless_alu_0_0_mux1_ctrl < 2);
  
  assume(stateless_alu_0_0_mux2_ctrl < 2);
  
  assume(stateless_alu_0_0_mux1_ctrl <= stateless_alu_0_0_mux2_ctrl);
  
  assume(stateless_alu_0_0_mode < 3);
  
  assume(stateless_alu_0_1_mux1_ctrl < 2);
  
  assume(stateless_alu_0_1_mux2_ctrl < 2);
  
  assume(stateless_alu_0_1_mux1_ctrl <= stateless_alu_0_1_mux2_ctrl);
  
  assume(stateless_alu_0_1_mode < 3);
  
  assume((salu_config_0_0 + 0) <= 2);
  
  assume((salu_config_0_0 + 0) <= 1);
  

  // Transformation from sketch 1's holes to sketch 2's holes
  

  // Check that sketches are equivalent.
  |StateAndPacket| state_and_packet;
  
    state_and_packet.pkt_0 = sanp_pkt_0;
  
  
    state_and_packet.state_0 = sanp_state_0;
  

  assert(pipeline@before(state_and_packet, stateful_operand_mux_0_0_ctrl,output_mux_phv_0_0_ctrl,output_mux_phv_0_1_ctrl,stateless_alu_0_0_mux1_ctrl,stateless_alu_0_0_mux2_ctrl,stateless_alu_0_0_opcode,stateless_alu_0_0_immediate,stateless_alu_0_0_mode,stateless_alu_0_1_mux1_ctrl,stateless_alu_0_1_mux2_ctrl,stateless_alu_0_1_opcode,stateless_alu_0_1_immediate,stateless_alu_0_1_mode,stateful_alu_0_0_opcode,stateful_alu_0_0_immediate,stateful_alu_0_0_mode,salu_config_0_0) == pipeline@after(state_and_packet, stateful_operand_mux_0_0_ctrl,output_mux_phv_0_0_ctrl,output_mux_phv_0_1_ctrl,stateless_alu_0_0_mux1_ctrl,stateless_alu_0_0_mux2_ctrl,stateless_alu_0_0_opcode,stateless_alu_0_0_immediate,stateless_alu_0_0_mode,stateless_alu_0_1_mux1_ctrl,stateless_alu_0_1_mux2_ctrl,stateless_alu_0_1_opcode,stateless_alu_0_1_immediate,stateless_alu_0_1_mode,stateful_alu_0_0_opcode,stateful_alu_0_0_immediate,stateful_alu_0_0_mode,salu_config_0_0));

  // Postconditions:

  
  assert((stateful_operand_mux_0_0_ctrl >= 0) && (stateful_operand_mux_0_0_ctrl <= 2));
  
  assert((output_mux_phv_0_0_ctrl >= 0) && (output_mux_phv_0_0_ctrl <= 2));
  
  assert((output_mux_phv_0_1_ctrl >= 0) && (output_mux_phv_0_1_ctrl <= 2));
  
  assert((stateless_alu_0_0_mux1_ctrl >= 0) && (stateless_alu_0_0_mux1_ctrl <= 2));
  
  assert((stateless_alu_0_0_mux2_ctrl >= 0) && (stateless_alu_0_0_mux2_ctrl <= 2));
  
  assert((stateless_alu_0_0_opcode >= 0) && (stateless_alu_0_0_opcode <= 2));
  
  assert((stateless_alu_0_0_immediate >= 0) && (stateless_alu_0_0_immediate <= 4));
  
  assert((stateless_alu_0_0_mode >= 0) && (stateless_alu_0_0_mode <= 4));
  
  assert((stateless_alu_0_1_mux1_ctrl >= 0) && (stateless_alu_0_1_mux1_ctrl <= 2));
  
  assert((stateless_alu_0_1_mux2_ctrl >= 0) && (stateless_alu_0_1_mux2_ctrl <= 2));
  
  assert((stateless_alu_0_1_opcode >= 0) && (stateless_alu_0_1_opcode <= 2));
  
  assert((stateless_alu_0_1_immediate >= 0) && (stateless_alu_0_1_immediate <= 4));
  
  assert((stateless_alu_0_1_mode >= 0) && (stateless_alu_0_1_mode <= 4));
  
  assert((stateful_alu_0_0_opcode >= 0) && (stateful_alu_0_0_opcode <= 2));
  
  assert((stateful_alu_0_0_immediate >= 0) && (stateful_alu_0_0_immediate <= 4));
  
  assert((stateful_alu_0_0_mode >= 0) && (stateful_alu_0_0_mode <= 2));
  
  assert((salu_config_0_0 >= 0) && (salu_config_0_0 <= 2));
  

  
  assert(stateful_operand_mux_0_0_ctrl < 2);
  
  assert(output_mux_phv_0_0_ctrl < 2);
  
  assert(output_mux_phv_0_1_ctrl < 2);
  
  assert(stateless_alu_0_0_mux1_ctrl < 2);
  
  assert(stateless_alu_0_0_mux2_ctrl < 2);
  
  assert(stateless_alu_0_0_mux1_ctrl <= stateless_alu_0_0_mux2_ctrl);
  
  assert(stateless_alu_0_0_mode < 3);
  
  assert(stateless_alu_0_1_mux1_ctrl < 2);
  
  assert(stateless_alu_0_1_mux2_ctrl < 2);
  
  assert(stateless_alu_0_1_mux1_ctrl <= stateless_alu_0_1_mux2_ctrl);
  
  assert(stateless_alu_0_1_mode < 3);
  
  assert((salu_config_0_0 + 0) <= 2);
  
  assert((salu_config_0_0 + 0) <= 1);
  
}
