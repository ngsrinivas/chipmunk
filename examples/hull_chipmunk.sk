//state_and_packet.pkt_0 = p.time
//state_and_packet.pkt_1 = p.bytes
//state_and_packet.pkt_2 = p.mark

//state_and_packet.state_0 = counter
//state_and_packet.state_1 = last_time

/*
void func(struct Packet p) {
  // Decrement counter according to drain rate
  counter = counter - (p.time - last_time) * DRAIN_RATE;
  if (counter < 0) counter = 0;

  // Increment counter
  counter += p.bytes;

  // If we are above the ECN_THRESH, mark
  if (counter > ECN_THRESH) p.mark = 1;

  // Store last time
  last_time = p.time;
}
*/

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
  state_and_packet.state_0 = state_and_packet.state_0 - (state_and_packet.pkt_0 - state_and_packet.state_1) * 10;
  if (state_and_packet.state_0 < 0) state_and_packet.state_0 = 0;
  
  state_and_packet.state_0 + = state_and_packet.pkt_1;

  if (state_and_packet.state_0 > 20) state_and_packet.pkt_2 = 1; 

  state_and_packet.state_1 = state_and_packet.pkt_0;
  return state_and_packet;
}
