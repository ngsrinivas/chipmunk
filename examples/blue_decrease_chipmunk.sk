//state_and_packet.pkt_1=p.now_plus_free
//state_and_packet.pkt_0=p.now
//state_and_packet.state_0 = last_update
//state_and_packet.state_1 = p_mark

/*
void func(struct Packet p) {
    p.now_plus_free = p.now - FREEZE_TIME;
// Run when link goes idle (lower priority?)
//  if (p.link_idle) {
    if (p.now_plus_free > last_update) {
      p_mark = p_mark - DELTA2;
      last_update = p.now;
    }
}
*/

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
  state_and_packet.pkt_1 = state_and_packet.pkt_0 - 10;
  if (state_and_packet.pkt_1 > state_and_packet.state_0){
	state_and_packet.state_1 = state_and_packet.state_1 - 2;
	state_and_packet.state_0 = state_and_packet.pkt_0;
  }
  return state_and_packet;
}
