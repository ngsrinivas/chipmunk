//state_and_packet.pkt_0 = p.loc
//state_and_packet.pkt_1 = p.ikey
//state_and_packet.pkt_2 = p.ckey
//state_and_packet.pkt_3 = p.cval;
//state_and_packet.pkt_4 = p.terminate;

//state_and_packet.state_0 = array1key[p.loc]
//state_and_packet.state_1 = array1val[p.loc]

/*
void func(struct Packet p) {
 // First stage
 p.loc = hash2(p.ikey, p.ikey); // Compute location using hash
 if (array1key[p.loc] == p.ikey) { // if this key already exists
   array1val[p.loc] = array1val[p.loc] + 1; // increment
   p.terminate = 1;
 } else { // if it doesn't
   array1key[p.loc] = p.ikey;         // initialize key
   array1val[p.loc] = 1;              // initialize value
   p.ckey = array1key[p.loc];         // swap (spurious swap if terminate is set)
   p.cval = array1val[p.loc];
   p.terminate = (array1key[p.loc] == 0); // terminate if the location was empty
 }
}
*/

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
  state_and_packet.pkt_0 = hash2(state_and_packet.pkt_1,state_and_packet.pkt_1);

  if (state_and_packet.state_0 == state_and_packet.pkt_1){
	state_and_packet.state_1 = state_and_packet.state_1 + 1;
	state_and_packet.pkt_4 = 1;
  } else{
	state_and_packet.state_0 = state_and_packet.pkt_1;
	state_and_packet.state_1 = 1;
	state_and_packet.pkt_2 = state_and_packet.state_0;
  }
  state_and_packet.pkt_3 = state_and_packet.state_1
  state_and_packet.pkt_4 = (state_and_packet.state_0 == 0);
  return state_and_packet;
}
