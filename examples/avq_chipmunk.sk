//state_and_packet.pkt_0 = p.time
//state_and_packet.pkt_1 = p.bytes
//state_and_packet.pkt_2 = p.mark
//state_and_packet.pkt_3 = p.min
//state_and_packet.pkt_4 = p.max

//state_and_packet.state_0 = vq
//state_and_packet.state_1 = capacity
//state_and_packet.state_2 = last_time

|StateAndPacket| program (|StateAndPacket| state_and_packet) {

  state_and_packet.state_0 = state_and_packet.state_0 + 1;
  if (state_and_packet.state_0 + state_and_packet.pkt_1 > 3) {
	state_and_packet.pkt_2 = 1;
  } else {
	state_and_packet.state_0 = state_and_packet.state_0 + state_and_packet.pkt_1;
  }

  state_and_packet.pkt_3 = ((state_and_packet.state_1 + 5 * 2 * 10 * (state_and_packet.pkt_0 - state_and_packet.state_2)) < 10) ? (state_and_packet.state_1 + 5 * 2 * 10 * (state_and_packet.pkt_0 - state_and_packet.state_2)) : 10;
  state_and_packet.pkt_4 =  (state_and_packet.pkt_3 - 5 * state_and_packet.pkt_1 < 0) ? 0 : state_and_packet.pkt_3 - 5 * state_and_packet.pkt_1;
  state_and_packet.state_1 = state_and_packet.pkt_4;
  state_and_packet.state_2 = state_and_packet.pkt_0;
  
  return state_and_packet;
}
