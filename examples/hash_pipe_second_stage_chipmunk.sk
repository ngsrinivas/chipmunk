//state_and_packet.pkt_0 = p.loc
//state_and_packet.pkt_1 = p.ckey
//state_and_packet.pkt_2 = p.cval;
//state_and_packet.pkt_3 = p.terminate;
//state_and_packet.pkt_4 = p.tmpkey;
//state_and_packet.pkt_5 = p.tmpval;

//state_and_packet.state_0 = array2key[p.loc]
//state_and_packet.state_1 = array2val[p.loc]

/*
void func(struct Packet p) {
 // Second stage
 p.loc = hash2(p.ckey, p.ckey);             // compute location
 if (array2key[p.loc] == p.ckey) {     // key already exists
   array2val[p.loc] = array2val[p.loc] + p.cval; // add cval
   p.terminate = 1;
 } else if (array2val[p.loc] < p.cval) { // Assume array2val[p.loc] == 0 => key doesn't exist
   p.tmpkey = array2key[p.loc];        // swap
   p.tmpval = array2val[p.loc];
   array2key[p.loc] = p.ckey;
   array2val[p.loc] = p.cval;
   p.ckey = p.tmpkey; // these assignments are spurious if terminate is set
   p.cval = p.tmpval;
   p.terminate = (array2val[p.loc] == 0);
 }
}
*/

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
  state_and_packet.pkt_0 = hash2(state_and_packet.pkt_1,state_and_packet.pkt_1);

  if (state_and_packet.state_0 == state_and_packet.pkt_1){
        state_and_packet.state_1 = state_and_packet.state_1 + state_and_packet.pkt_2;
        state_and_packet.pkt_3 = 1;
  } else if (state_and_packet.state_1 < state_and_packet.pkt_2){
	state_and_packet.pkt_4 = state_and_packet.state_0;
	state_and_packet.pkt_5 = state_and_packet.state_1;
	state_and_packet.state_0 = state_and_packet.pkt_1;
	state_and_packet.state_1 = state_and_packet.pkt_2;
	state_and_packet.pkt_1 = state_and_packet.pkt_4;
	state_and_packet.pkt_2 = state_and_packet.pkt_5;

	state_and_packet.pkt_3 = (state_and_packet.state_1 == 0);
  }

  return state_and_packet;
}

