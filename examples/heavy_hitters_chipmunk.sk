//state_and_packet.pkt_0 = p.sketch1_idx
//state_and_packet.pkt_1 = p.sketch2_idx
//state_and_packet.pkt_2 = p.sketch3_idx
//state_and_packet.pkt_3 = p.sport
//state_and_packet.pkt_4 = p.dport
//state_and_packet.pkt_5 = p.is_not_heavy_hitter

//state_and_packet.state_0 = sketch_cnt_1[p.sketch1_idx] 
//state_and_packet.state_1 = sketch_cnt_2[p.sketch2_idx]
//state_and_packet.state_2 = sketch_cnt_3[p.sketch3_idx] 

/*
void func(struct Packet p) {
  p.sketch1_idx = hash2a(p.sport, p.dport) % NUM_ENTRIES;
  p.sketch2_idx = hash2b(p.sport, p.dport) % NUM_ENTRIES;
  p.sketch3_idx = hash2c(p.sport, p.dport) % NUM_ENTRIES;
  if (sketch_cnt_1[p.sketch1_idx] > low_th && sketch_cnt_1[p.sketch1_idx] < hi_th &&
            sketch_cnt_2[p.sketch2_idx] > low_th && sketch_cnt_2[p.sketch2_idx] < hi_th &&
            sketch_cnt_3[p.sketch3_idx] > low_th && sketch_cnt_3[p.sketch3_idx] < hi_th) {
                p.is_not_heavy_hitter = 0;
  }     else {
                p.is_not_heavy_hitter = 1;
  }
        sketch_cnt_1[p.sketch1_idx]+= 1;
        sketch_cnt_2[p.sketch2_idx]+= 1;
        sketch_cnt_3[p.sketch3_idx]+= 1;
}
*/

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
  if (state_and_packet.state_1 > 100 && state_and_packet.state_1 < 1000 &&
      state_and_packet.state_2 > 100 && state_and_packet.state_2 < 1000 &&
	state_and_packet.state_3 > 100 && state_and_packet.state_3 < 1000 ){
	state_and_packet.pkt_5 = 0;
  } else{
	state_and_packet.pkt_5 = 1;
  }
  state_and_packet.state_0 + = 1;
  state_and_packet.state_1 + = 1;
  state_and_packet.state_2 + = 1;
  state_and_packet.pkt_0 = state_and_packet.state_0 + state_and_packet.pkt_1;
  state_and_packet.pkt_2 = state_and_packet.state_0 + state_and_packet.state_1;
  return state_and_packet;
}
